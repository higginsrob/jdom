name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Try npm ci first, fallback to npm install if lock file is out of sync
          if npm ci; then
            echo "✅ npm ci succeeded"
          else
            echo "⚠️ npm ci failed, lock file out of sync. Using npm install..."
            npm install
            echo "📝 Consider updating package-lock.json in repository"
          fi

      - name: Verify installation
        run: |
          echo "📦 Installed packages:"
          npm list --depth=0 || true
          echo "✅ Dependencies verified"

      - name: Check formatting
        run: |
          npm run prettier -- --check
          echo "✅ Code formatting is correct"

      - name: Run ESLint
        run: |
          # Run eslint on the main file during build (via webpack)
          npm run build
          echo "✅ Linting passed"

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Try npm ci first, fallback to npm install if lock file is out of sync
          npm ci || (echo "⚠️ Lock file out of sync, using npm install instead" && npm install)

      - name: Run tests
        run: npm test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: test-results/

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Try npm ci first, fallback to npm install if lock file is out of sync
          npm ci || (echo "⚠️ Lock file out of sync, using npm install instead" && npm install)

      - name: Build production bundle
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 30

      - name: Check bundle size
        run: |
          echo "📦 Bundle size information:"
          ls -lh dist/
          echo "🎯 Main bundle: $(du -h dist/jdom.js | cut -f1)"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Try npm ci first, fallback to npm install if lock file is out of sync
          npm ci || (echo "⚠️ Lock file out of sync, using npm install instead" && npm install)

      - name: Run security audit
        run: |
          npm audit --audit-level moderate
          echo "🔒 Security audit completed"

      - name: Check for vulnerabilities
        run: |
          if npm audit --audit-level high --json | jq '.vulnerabilities | length' | grep -q '^0$'; then
            echo "✅ No high-severity vulnerabilities found"
          else
            echo "⚠️ High-severity vulnerabilities detected"
            npm audit --audit-level high
            exit 1
          fi