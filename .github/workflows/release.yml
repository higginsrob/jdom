name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Try npm ci first, fallback to npm install if lock file is out of sync
          npm ci || (echo "⚠️ Lock file out of sync, using npm install instead" && npm install)

      - name: Run full test suite
        run: npm test

      - name: Build production bundle
        run: npm run build

      - name: Validate package
        run: |
          echo "📋 Validating package.json..."
          npm pack --dry-run
          echo "✅ Package validation completed"

  publish-npm:
    name: Publish to NPM
    needs: validate
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Try npm ci first, fallback to npm install if lock file is out of sync
          npm ci || (echo "⚠️ Lock file out of sync, using npm install instead" && npm install)

      - name: Build production bundle
        run: npm run build

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get package info
        id: package
        run: |
          echo "name=$(jq -r '.name' package.json)" >> $GITHUB_OUTPUT
          echo "version=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT

      - name: Create release notes
        run: |
          echo "🚀 Published ${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }} to NPM"
          echo "📦 Install with: npm install ${{ steps.package.outputs.name }}"
          echo "🔗 NPM: https://www.npmjs.com/package/${{ steps.package.outputs.name }}"

  github-release:
    name: Create GitHub Release
    needs: publish-npm
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Try npm ci first, fallback to npm install if lock file is out of sync
          npm ci || (echo "⚠️ Lock file out of sync, using npm install instead" && npm install)

      - name: Build production bundle
        run: npm run build

      - name: Get package info
        id: package
        run: |
          echo "name=$(jq -r '.name' package.json)" >> $GITHUB_OUTPUT
          echo "version=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          echo "## 🚀 What's New in v${{ steps.package.outputs.version }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### 📦 Installation" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo "npm install ${{ steps.package.outputs.name }}" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### 🔗 Links" >> RELEASE_NOTES.md
          echo "- 📚 [Documentation](https://github.com/${{ github.repository }}#readme)" >> RELEASE_NOTES.md
          echo "- 🎯 [Live Demo](https://higginsrob.github.io/jdom)" >> RELEASE_NOTES.md
          echo "- 📦 [NPM Package](https://www.npmjs.com/package/${{ steps.package.outputs.name }})" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### 📊 Bundle Info" >> RELEASE_NOTES.md
          echo "- Main bundle: $(du -h dist/jdom.js | cut -f1)" >> RELEASE_NOTES.md
          echo "- Zero dependencies 🎉" >> RELEASE_NOTES.md

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/jdom.js
          asset_name: jdom.js
          asset_content_type: application/javascript